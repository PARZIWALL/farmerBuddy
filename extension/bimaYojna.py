import io
import os
import streamlit as st
from reportlab.lib.pagesizes import A4
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle, Image as ReportLabImage
from reportlab.lib import colors
from reportlab.lib.enums import TA_CENTER, TA_LEFT
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont
from reportlab.lib.units import inch
from typing import List, Dict, Any, Optional
from datetime import datetime
import datetime as dt
from PIL import Image as PILImage # Use an alias to avoid conflict with ReportLab's Image

# --- CONFIGURATION ---
FONT_NAME = "Times-Roman"
FONT_BOLD = "Times-Bold"

# Define schemes and their required fields for farmer input
SCHEMES_INFO_FARMER = {
    "PMFBY - Yield Loss Claim": {
        "name": "Pradhan Mantri Fasal Bima Yojana - Yield Loss Claim",
        "description": "Covers yield losses due to non-preventable risks. Compensation is based on the difference between Threshold Yield and Actual Yield for a notified area.",
        "documents_needed_for_submission": [
            "Aadhaar Card", "Bank Passbook", "Land Records (Khatauni/Khasra)",
            "Sowing Certificate (if applicable)", "Proof of Premium Payment",
            "Loss Intimation Form (generated by this app)"
        ],
        "fields": [
            {"label": "Farmer's Full Name", "input_type": "text", "key_id": "farmer_name"},
            {"label": "Aadhaar Number", "input_type": "text", "key_id": "aadhaar"},
            {"label": "Mobile Number", "input_type": "phone", "key_id": "mobile"},
            {"label": "District", "input_type": "text", "key_id": "district"},
            {"label": "Block/Tehsil", "input_type": "text", "key_id": "block"},
            {"label": "Village", "input_type": "text", "key_id": "village"},
            {"label": "Crop Type (Notified)", "input_type": "text", "key_id": "crop_type"},
            {"label": "Season (Kharif/Rabi)", "input_type": "text", "key_id": "season"},
            {"label": "Year of Loss", "input_type": "number", "key_id": "year"},
            {"label": "Survey/Khasra Number", "input_type": "text", "key_id": "survey_no"},
            {"label": "Area Insured (Hectares)", "input_type": "number", "key_id": "area_insured"},
            {"label": "Date of Loss Event", "input_type": "date", "key_id": "date_loss"},
            {"label": "Calamity Type (e.g., Drought, Flood)", "input_type": "text", "key_id": "calamity_type"},
            {"label": "Bank Name", "input_type": "text", "key_id": "bank_name"},
            {"label": "Bank Account Number", "input_type": "text", "key_id": "bank_account"},
            {"label": "IFSC Code", "input_type": "text", "key_id": "ifsc_code"},
            {"label": "Premium Paid (₹)", "input_type": "number", "key_id": "premium_paid"},
            {"label": "Sum Insured (₹)", "input_type": "number", "key_id": "sum_insured"},
            {"label": "Brief Description of Loss", "input_type": "textarea", "key_id": "loss_declaration"},
            {"label": "Damage Photograph", "input_type": "file_uploader", "key_id": "damage_photo"}
        ]
    },
    "PMFBY - Prevented Sowing Claim": {
        "name": "Pradhan Mantri Fasal Bima Yojana - Prevented Sowing Claim",
        "description": "Provides compensation when farmers are unable to sow/plant the notified crop due to adverse weather conditions (e.g., deficient or excess rainfall).",
        "documents_needed_for_submission": [
            "Aadhaar Card", "Bank Passbook", "Land Records (Khatauni/Khasra)",
            "Proof of Premium Payment", "Declaration of Non-Sowing (generated by this app)"
        ],
        "fields": [
            {"label": "Farmer's Full Name", "input_type": "text", "key_id": "farmer_name"},
            {"label": "Aadhaar Number", "input_type": "text", "key_id": "aadhaar"},
            {"label": "Mobile Number", "input_type": "phone", "key_id": "mobile"},
            {"label": "District", "input_type": "text", "key_id": "district"},
            {"label": "Block/Tehsil", "input_type": "text", "key_id": "block"},
            {"label": "Village", "input_type": "text", "key_id": "village"},
            {"label": "Crop Type (Notified)", "input_type": "text", "key_id": "crop_type"},
            {"label": "Season (Kharif/Rabi)", "input_type": "text", "key_id": "season"},
            {"label": "Year of Non-Sowing", "input_type": "number", "key_id": "year"},
            {"label": "Survey/Khasra Number", "input_type": "text", "key_id": "survey_no"},
            {"label": "Area Insured (Hectares)", "input_type": "number", "key_id": "area_insured"},
            {"label": "Reason for Non-Sowing (e.g., Deficient Rainfall)", "input_type": "textarea", "key_id": "reason_non_sowing"},
            {"label": "Bank Name", "input_type": "text", "key_id": "bank_name"},
            {"label": "Bank Account Number", "input_type": "text", "key_id": "bank_account"},
            {"label": "IFSC Code", "input_type": "text", "key_id": "ifsc_code"},
            {"label": "Premium Paid (₹)", "input_type": "number", "key_id": "premium_paid"},
            {"label": "Sum Insured (₹)", "input_type": "number", "key_id": "sum_insured"}
        ]
    },
    "PMFBY - Post-Harvest Loss Claim": {
        "name": "Pradhan Mantri Fasal Bima Yojana - Post-Harvest Loss Claim",
        "description": "Covers damage to harvested crops lying in 'cut & spread' condition in the field for up to 14 days due to specific perils (e.g., cyclone, unseasonal rain).",
        "documents_needed_for_submission": [
            "Aadhaar Card", "Bank Passbook", "Land Records (Khatauni/Khasra)",
            "Proof of Premium Payment", "Loss Intimation Form (generated by this app)"
        ],
        "fields": [
            {"label": "Farmer's Full Name", "input_type": "text", "key_id": "farmer_name"},
            {"label": "Aadhaar Number", "input_type": "text", "key_id": "aadhaar"},
            {"label": "Mobile Number", "input_type": "phone", "key_id": "mobile"},
            {"label": "District", "input_type": "text", "key_id": "district"},
            {"label": "Block/Tehsil", "input_type": "text", "key_id": "block"},
            {"label": "Village", "input_type": "text", "key_id": "village"},
            {"label": "Crop Type (Notified)", "input_type": "text", "key_id": "crop_type"},
            {"label": "Season (Kharif/Rabi)", "input_type": "text", "key_id": "season"},
            {"label": "Year of Loss", "input_type": "number", "key_id": "year"},
            {"label": "Survey/Khasra Number", "input_type": "text", "key_id": "survey_no"},
            {"label": "Area Insured (Hectares)", "input_type": "number", "key_id": "area_insured"},
            {"label": "Date of Harvest", "input_type": "date", "key_id": "date_harvest"},
            {"label": "Date of Loss Event", "input_type": "date", "key_id": "date_loss"},
            {"label": "Calamity Type (Post-Harvest)", "input_type": "text", "key_id": "calamity_type"},
            {"label": "Estimated Damage Percentage (%)", "input_type": "number", "key_id": "damage_percentage"},
            {"label": "Bank Name", "input_type": "text", "key_id": "bank_name"},
            {"label": "Bank Account Number", "input_type": "text", "key_id": "bank_account"},
            {"label": "IFSC Code", "input_type": "text", "key_id": "ifsc_code"},
            {"label": "Premium Paid (₹)", "input_type": "number", "key_id": "premium_paid"},
            {"label": "Sum Insured (₹)", "input_type": "number", "key_id": "sum_insured"},
            {"label": "Damage Photograph", "input_type": "file_uploader", "key_id": "damage_photo"}
        ]
    },
    "Kisan Credit Card (KCC) Application": {
        "name": "Kisan Credit Card (KCC) Application",
        "description": "Provides concessional credit facilities for agricultural and allied activities. It offers short-term loans for crop production, post-harvest expenses, and other needs.",
        "documents_needed_for_submission": [
            "Duly filled application form", "Aadhaar Card", "PAN Card",
            "Land ownership/cultivation documents", "Bank Account Passbook",
            "Passport size photographs (2-3 copies)", "Income Certificate (if applicable)"
        ],
        "fields": [
            {"label": "Farmer's Full Name", "input_type": "text", "key_id": "farmer_name"},
            {"label": "Father's/Husband's Name", "input_type": "text", "key_id": "father_husband_name"},
            {"label": "Date of Birth", "input_type": "date", "key_id": "dob"},
            {"label": "Gender", "input_type": "text", "key_id": "gender"},
            {"label": "Aadhaar Number", "input_type": "text", "key_id": "aadhaar"},
            {"label": "PAN Number", "input_type": "text", "key_id": "pan"},
            {"label": "Mobile Number", "input_type": "phone", "key_id": "mobile"},
            {"label": "Complete Address", "input_type": "textarea", "key_id": "address"},
            {"label": "Village", "input_type": "text", "key_id": "village"},
            {"label": "District", "input_type": "text", "key_id": "district"},
            {"label": "State", "input_type": "text", "key_id": "state"},
            {"label": "PIN Code", "input_type": "text", "key_id": "pincode"},
            {"label": "Total Land Area (Hectares)", "input_type": "number", "key_id": "total_land_area"},
            {"label": "Main Crop Cultivated", "input_type": "text", "key_id": "main_crop"},
            {"label": "Bank Name (for KCC)", "input_type": "text", "key_id": "bank_name"},
            {"label": "Branch Name", "input_type": "text", "key_id": "branch_name"},
            {"label": "Existing Loan (if any)", "input_type": "text", "key_id": "existing_loan"}
        ]
    },
    "PM Kisan Samman Nidhi (New Registration)": {
        "name": "Pradhan Mantri Kisan Samman Nidhi - New Farmer Registration",
        "description": "Scheme providing ₹6,000 per year income support to eligible farmer families. This form is for new registrations.",
        "documents_needed_for_submission": [
            "Aadhaar Card", "Bank Passbook", "Land Records (Khatauni/Khasra)",
            "Proof of Citizenship", "Passport Size Photograph"
        ],
        "fields": [
            {"label": "Farmer's Full Name", "input_type": "text", "key_id": "farmer_name"},
            {"label": "Father's/Husband's Name", "input_type": "text", "key_id": "father_husband_name"},
            {"label": "Aadhaar Number", "input_type": "text", "key_id": "aadhaar"},
            {"label": "Mobile Number", "input_type": "phone", "key_id": "mobile"},
            {"label": "Gender", "input_type": "text", "key_id": "gender"},
            {"label": "Category (SC/ST/General)", "input_type": "text", "key_id": "category"},
            {"label": "Village", "input_type": "text", "key_id": "village"},
            {"label": "District", "input_type": "text", "key_id": "district"},
            {"label": "State", "input_type": "text", "key_id": "state"},
            {"label": "PIN Code", "input_type": "text", "key_id": "pincode"},
            {"label": "Land Registration ID", "input_type": "text", "key_id": "land_reg_id"},
            {"label": "Survey/Khasra Number", "input_type": "text", "key_id": "survey_no"},
            {"label": "Total Land Area (Hectares)", "input_type": "number", "key_id": "total_land_area"},
            {"label": "Bank Name", "input_type": "text", "key_id": "bank_name"},
            {"label": "Bank Account Number", "input_type": "text", "key_id": "bank_account"},
            {"label": "IFSC Code", "input_type": "text", "key_id": "ifsc_code"}
        ]
    }
}


def generate_professional_pdf(data: Dict[str, Any], scheme_info: Dict[str, Any]) -> Optional[bytes]:
    """Generates a professional PDF from scratch with proper formatting."""
    try:
        buffer = io.BytesIO()
        doc = SimpleDocTemplate(buffer, pagesize=A4, rightMargin=inch, leftMargin=inch, topMargin=inch, bottomMargin=inch)
        
        # Styles
        styles = getSampleStyleSheet()
        styles.add(ParagraphStyle(name='TitleStyle', fontName='Times-Bold', fontSize=18, leading=22, alignment=TA_CENTER, spaceAfter=12))
        styles.add(ParagraphStyle(name='HeadingStyle', fontName='Times-Bold', fontSize=14, leading=18, alignment=TA_LEFT, spaceBefore=10, spaceAfter=6))
        styles.add(ParagraphStyle(name='NormalStyle', fontName='Times-Roman', fontSize=10, leading=12, alignment=TA_LEFT))

        story = []

        # Title
        story.append(Paragraph(f"{scheme_info['name']}", styles['TitleStyle']))
        story.append(Paragraph(f"Application Form", styles['NormalStyle']))
        story.append(Spacer(1, 0.2*inch))

        # Photo Placeholder Section
        story.append(Paragraph("<b>Passport Size Photograph</b>", styles['NormalStyle']))
        story.append(Table([['']], colWidths=[2*inch], style=[('GRID', (0,0), (-1,-1), 1, colors.black), ('BACKGROUND', (0,0), (-1,-1), colors.white)]))
        story.append(Spacer(1, 0.2*inch))

        # Data Sections
        sections = {
            "1. Personal Details": ["farmer_name", "aadhaar", "mobile", "father_husband_name", "dob", "gender", "pan", "category"],
            "2. Location Details": ["district", "block", "village", "state", "pincode", "address"],
            "3. Land and Crop Details": ["survey_no", "area_insured", "total_land_area", "main_crop", "crop_type", "season", "year", "date_loss", "date_harvest", "calamity_type", "damage_percentage", "reason_non_sowing"],
            "4. Bank & Insurance Details": ["bank_name", "branch_name", "bank_account", "ifsc_code", "premium_paid", "sum_insured", "existing_loan", "land_reg_id", "loss_declaration"]
        }
        
        field_data = {field['key_id']: data.get(field['key_id'], 'N/A') for field in scheme_info['fields']}

        for heading, keys in sections.items():
            section_data = []
            for field in scheme_info['fields']:
                key_id = field['key_id']
                if key_id in keys and field_data[key_id] != 'N/A':
                    value = field_data[key_id]
                    if field['input_type'] == 'date' and isinstance(value, dt.date):
                        value = value.strftime("%d/%m/%Y")
                    section_data.append([Paragraph(f"<b>{field['label']}:</b>", styles['NormalStyle']), Paragraph(str(value), styles['NormalStyle'])])

            if section_data:
                story.append(Paragraph(f"<b>{heading}</b>", styles['HeadingStyle']))
                table_style = TableStyle([
                    ('FONTNAME', (0, 0), (-1, -1), 'Times-Roman'),
                    ('BACKGROUND', (0, 0), (-1, -1), colors.white),
                    ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                    ('VALIGN', (0, 0), (-1, -1), 'TOP'),
                    ('LEFTPADDING', (0, 0), (-1, -1), 6),
                    ('RIGHTPADDING', (0, 0), (-1, -1), 6),
                    ('TOPPADDING', (0, 0), (-1, -1), 6),
                    ('BOTTOMPADDING', (0, 0), (-1, -1), 6),
                    ('GRID', (0, 0), (-1, -1), 0.5, colors.grey),
                ])
                story.append(Table(section_data, colWidths=[2.5*inch, 4*inch], style=table_style))
                story.append(Spacer(1, 0.2*inch))
        
        # --- NEW: DAMAGE PHOTO SECTION ---
        damage_photo_file = data.get('damage_photo')
        if damage_photo_file:
            try:
                story.append(Paragraph("<b>Damage Photograph</b>", styles['HeadingStyle']))
                
                # ReportLab requires an in-memory or on-disk path to the image
                photo_buffer = io.BytesIO(damage_photo_file.getvalue())
                
                # Resize the image to fit on the page
                img = ReportLabImage(photo_buffer, width=4*inch, height=3*inch)
                story.append(img)
                story.append(Spacer(1, 0.2*inch))

            except Exception as e:
                st.error(f"Failed to embed the image in the PDF: {e}")
        
        # Final Declaration
        declaration_text = "I, the undersigned, hereby declare that the information provided above is true and correct to the best of my knowledge and belief. I agree to abide by the terms and conditions of the scheme."
        story.append(Paragraph("<b>Declaration:</b>", styles['HeadingStyle']))
        story.append(Paragraph(declaration_text, styles['NormalStyle']))
        story.append(Spacer(1, 0.4*inch))

        # Signature and Date
        signature_table_data = [
            [Paragraph("<b>Signature of Farmer:</b>", styles['NormalStyle']), ''],
            ['', ''],
            [f'Date: {datetime.now().strftime("%d/%m/%Y")}', 'Place:']
        ]
        story.append(Table(signature_table_data, colWidths=[3*inch, 3*inch], style=[('VALIGN', (0,0), (-1,-1), 'BOTTOM'), ('LINEABOVE', (1,0), (1,0), 1, colors.black)]))
        
        doc.build(story)
        buffer.seek(0)
        return buffer.read()

    except Exception as e:
        st.error(f"An error occurred while generating the PDF: {e}")
        st.info("Please ensure the data is complete and the correct font is being used.")
        return None

# --- STREAMLIT UI ---
def main():
    st.set_page_config(
        page_title="Krishi Sahayak - Farmer Document Generator",
        layout="wide",
        initial_sidebar_state="expanded"
    )

    st.markdown("""
        <style>
        .stApp { background-color: #f0f2f5; color: #333; }
        .main-header { background: linear-gradient(90deg, #2E7D32, #4CAF50); padding: 1.5rem; border-radius: 10px; color: white; text-align: center; margin-bottom: 2rem; box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1); }
        .main-header h1 { font-size: 2.2rem; font-weight: 700; margin-bottom: 0.5rem; }
        .main-header p { font-size: 1.1rem; opacity: 0.9; }
        .stSelectbox > div > div { border-radius: 8px; border: 1px solid #ccc; padding: 0.5rem; }
        .stButton > button { background-color: #4CAF50; color: white; border-radius: 8px; padding: 0.8rem 1.5rem; font-size: 1.1rem; font-weight: 600; transition: all 0.2s ease-in-out; box-shadow: 0 2px 5px rgba(0,0,0,0.2); }
        .stButton > button:hover { background-color: #45a049; transform: translateY(-2px); box-shadow: 0 4px 8px rgba(0,0,0,0.3); }
        .stTextInput > div > div > input, .stNumberInput > div > div > input, .stDateInput > div > div > input, .stTextArea > div > div > textarea { border-radius: 8px; padding: 0.75rem; border: 1px solid #ddd; background-color: #fdfdfd; }
        .stMarkdown h2 { color: #2E7D32; font-size: 1.8rem; margin-top: 1.5rem; margin-bottom: 1rem; border-bottom: 2px solid #4CAF50; padding-bottom: 0.5rem; }
        .stMarkdown h3 { color: #4CAF50; font-size: 1.4rem; margin-top: 1.2rem; margin-bottom: 0.8rem; }
        .stInfo { background-color: #e8f5e9; color: #2e7d32; border-left: 5px solid #4CAF50; padding: 1rem; border-radius: 8px; margin-bottom: 1.5rem; }
        .stWarning { background-color: #fff3cd; color: #856404; border-left: 5px solid #ffc107; padding: 1rem; border-radius: 8px; margin-bottom: 1.5rem; }
        .document-list { list-style-type: none; padding-left: 0; }
        .document-list li { background-color: #f0f8ff; border: 1px solid #cce5ff; border-radius: 5px; padding: 8px 12px; margin-bottom: 5px; display: flex; align-items: center; gap: 10px; font-size: 0.95rem; color: #004085; }
        .document-list li i { color: #007bff; }
        </style>
    """, unsafe_allow_html=True)

    st.markdown("""
        <div class="main-header">
            <h1>🌾 Krishi Sahayak: Farmer Document Generator</h1>
            <p>Automate your government scheme applications with ease</p>
        </div>
    """, unsafe_allow_html=True)

    st.sidebar.header("About This App")
    st.sidebar.info(
        "This application helps farmers generate official government scheme application forms in PDF format. "
        "Your data is processed locally in your browser and is never stored or shared, ensuring complete privacy."
    )

    # --- Scheme Selection ---
    st.header("1. Choose Your Scheme")
    scheme_options = list(SCHEMES_INFO_FARMER.keys())
    selected_scheme_name = st.selectbox(
        "Select the Government Scheme you want to apply for:",
        [""] + scheme_options,
        format_func=lambda x: x if x else "--- Select a Scheme ---"
    )

    selected_scheme_info = None
    if selected_scheme_name:
        selected_scheme_info = SCHEMES_INFO_FARMER[selected_scheme_name]
        
        st.subheader(f"Details for: {selected_scheme_info['name']}")
        st.info(selected_scheme_info['description'])

        st.subheader("Eligibility & Required Documents")
        st.markdown(f"**Documents you will need to submit along with the generated form:**")
        st.markdown('<ul class="document-list">', unsafe_allow_html=True)
        for doc in selected_scheme_info['documents_needed_for_submission']:
            st.markdown(f'<li><i class="fas fa-file-alt"></i> {doc}</li>', unsafe_allow_html=True)
        st.markdown('</ul>', unsafe_allow_html=True)

        st.warning(
            "**Important Data Privacy Notice:**\n\n"
            "This application processes all your information directly in your web browser. "
            "Your data is **NOT** sent to any server, stored, or shared. "
            "Once you close this tab, your data is gone."
        )

        st.header("2. Fill in Your Details")
        st.markdown("Please provide the required information below.")
        
        form_data = {}
        with st.form(key='application_form'):
            cols = st.columns(2)
            col_idx = 0
            
            for field in selected_scheme_info['fields']:
                with cols[col_idx % 2]:
                    unique_key = f"{selected_scheme_name}_{field['key_id']}"
                    
                    if field['input_type'] == 'text':
                        form_data[field['key_id']] = st.text_input(f"*{field['label']}", key=unique_key)
                    elif field['input_type'] == 'phone':
                        form_data[field['key_id']] = st.text_input(f"*{field['label']}", key=unique_key, help="Please enter a 10-digit mobile number.")
                    elif field['input_type'] == 'number':
                        form_data[field['key_id']] = st.number_input(f"*{field['label']}", key=unique_key, min_value=0.0)
                    elif field['input_type'] == 'date':
                        form_data[field['key_id']] = st.date_input(f"*{field['label']}", key=unique_key, value=None)
                    elif field['input_type'] == 'textarea':
                        form_data[field['key_id']] = st.text_area(f"*{field['label']}", key=unique_key, height=100)
                    elif field['input_type'] == 'file_uploader':
                        form_data[field['key_id']] = st.file_uploader(f"*{field['label']}", key=unique_key, type=['jpg', 'jpeg', 'png'])

                col_idx += 1
            
            st.markdown("---")
            submit_button = st.form_submit_button(label='Generate PDF Application')

        if submit_button:
            st.success("✅ Application data successfully captured. Generating PDF...")
            
            pdf_bytes = generate_professional_pdf(form_data, selected_scheme_info)
            
            if pdf_bytes:
                st.header("3. Download Your Application")
                st.success("🎉 Your application form is ready! Download it below.")
                
                filename = f"{selected_scheme_info['name'].replace(' ', '_')}_Application_{datetime.now().strftime('%Y%m%d')}.pdf"
                st.download_button(
                    label="📥 Download PDF",
                    data=pdf_bytes,
                    file_name=filename,
                    mime="application/pdf"
                )

                st.markdown("---")
                st.subheader("Next Steps")
                st.info(
                    "1. **Print** the downloaded PDF document.\n"
                    "2. **Sign** the form where required.\n"
                    "3. **Attach** all the required documents listed above.\n"
                    "4. **Submit** the complete set to your nearest Government office, bank, or a designated Common Service Center."
                )

if __name__ == "__main__":
    main()